controller:
  replicas: 1 # Additional replicas will cause sharding of managed clusters across number of replicas.
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true
  env:
    - name: ARGOCD_K8S_CLIENT_QPS #required for Crossplane too many CRDs https://github.com/argoproj/argo-cd/pull/448
      value: '300'

repoServer:
  autoscaling:
    enabled: true
    minReplicas: 1
  resources: # Adjust based on your specific use case (required for HPA)
    requests:
      cpu: '100m'
      memory: '256Mi'
    limits:
      cpu: '200m'
      memory: '512Mi'
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true

applicationSet:
  replicaCount: 1 # The controller doesn't scale horizontally, is active-standby replicas
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true

server:
  autoscaling:
    enabled: true
    minReplicas: 1
  resources: # Adjust based on your specific use case (required for HPA)
    requests:
      cpu: '100m'
      memory: '256Mi'
    limits:
      cpu: '200m'
      memory: '512Mi'
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true
  service:
    type: LoadBalancer
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
      service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing

configs:
  repositories:
    # Required when using helm repository with oci formal like karpenter and aws-gateway-api-controller
    aws-public-ecr:
      name: aws-public-ecr
      type: helm
      url: public.ecr.aws
      enableOCI: 'true'
    # aws-private-ecr:
    #   url: 058264501230.dkr.ecr.ap-northeast-2.amazonaws.com
    #   name: private-repo
    #   type: helm
    #   enableOCI: 'true'
    #   password: {{ .Values.ecr.password }}
    #   username: aws
    bitnami:
      url: registry-1.docker.io/bitnamicharts
      name: redis
      enableOCI: 'true'
      type: helm
  # params:
  #   applicationsetcontroller.enable.progressive.syncs: true
  cm:
    application.resourceTrackingMethod: 'annotation' #use annotation for tracking required for Crossplane
    resource.exclusions: |
      - kinds:
        - ProviderConfigUsage
        apiGroups:
        - "*"
    resource.customizations: |
      v1/Namespace:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "0"
      v1/ResourceQuota:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "1"
      storage.k8s.io/StorageClass:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "1"
      apiextensions.k8s.io/CustomResourceDefinition:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "2"
      admissionregistration.k8s.io/MutatingWebhookConfiguration:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "3"
      v1/ServiceAccount:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "4"
      policy/v1beta1/PodSecurityPolicy:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "4"
      networking.k8s.io/NetworkPolicy:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "4"
      rbac.authorization.k8s.io/Role:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "5"
      rbac.authorization.k8s.io/ClusterRole:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "5"
      rbac.authorization.k8s.io/RoleBinding:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "6"
      rbac.authorization.k8s.io/ClusterRoleBinding:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "6"
      v1/ConfigMap:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "7"
      v1/Secret:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "7"
      v1/Endpoints:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "7"
      v1/Service:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "8"
      v1/LimitRange:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "8"
      scheduling.k8s.io/PriorityClass:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "8"
      v1/PersistentVolume:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "8"
      v1/PersistentVolumeClaim:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "8"
      apps/Deployment:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "9"
      apps/StatefulSet:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "9"
      batch/CronJob:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "9"
      policy/PodDisruptionBudget:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "9"
      admissionregistration.k8s.io/ValidatingWebhookConfiguration:
        patch: |
          metadata:
            annotations:
              argocd.argoproj.io/sync-wave: "10"

      admissionregistration.k8s.io/MutatingWebhookConfiguration:
        ignoreDifferences: |
          jsonPointers:
            - /webhooks/0/matchConditions
            
      storage.k8s.io/CSIDriver:
        ignoreDifferences: |
          jsonPointers:
          - /spec/seLinuxMount
          
      "awsblueprints.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          if obj.status == nil or obj.status.conditions == nil then
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end

            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end
          end

          return health_status

      "*.aws.upbound.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          if obj.status == nil or obj.status.conditions == nil then
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end

            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end
          end

          return health_status

      "*.aws.crossplane.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          if obj.status == nil or obj.status.conditions == nil then
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end

            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end
          end

          return health_status


# -- Array of extra K8s manifests to deploy
## Note: Supports use of custom Helm templates
##       It gets handle in this form inside the argo-cd chart
# {{ range .Values.extraObjects }}
# ---
# {{ if typeIs "string" . }}
#     {{- tpl . $ }}
# {{- else }}
#     {{- tpl (toYaml .) $ }}
# {{- end }}
# {{ end }}
extraObjects:
  - |
    apiVersion: argoproj.io/v1alpha1
    kind: AppProject
    metadata:
      name: default
      namespace: {{ $.Release.Namespace | quote }}
      annotations:
        source: gitops-bridge
    spec:
      clusterResourceWhitelist:
      - group: '*'
        kind: '*'
      sourceRepos:
        - '*'
      destinations:
        - namespace: '*'
          name: '*'
          server: '*'
